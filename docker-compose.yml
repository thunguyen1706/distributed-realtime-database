services:
  # PostgreSQL Shards
  pg_shard_0:
    image: postgres:15
    container_name: pg_shard_0
    environment:
      POSTGRES_USER: ${PG_SHARD_USER}
      POSTGRES_PASSWORD: ${PG_SHARD_PASS}
      POSTGRES_DB: ${PG_SHARD_DB}
    ports:
      - "5433:5432"
    volumes:
      - pgdata0:/var/lib/postgresql/data
      - ./sql/001_schema.sql:/docker-entrypoint-initdb.d/001_schema.sql:ro
    networks:
      - social-network

  pg_shard_1:
    image: postgres:15
    container_name: pg_shard_1
    environment:
      POSTGRES_USER: ${PG_SHARD_USER}
      POSTGRES_PASSWORD: ${PG_SHARD_PASS}
      POSTGRES_DB: ${PG_SHARD_DB}
    ports:
      - "5434:5432"
    volumes:
      - pgdata1:/var/lib/postgresql/data
      - ./sql/001_schema.sql:/docker-entrypoint-initdb.d/001_schema.sql:ro
    networks:
      - social-network

  pg_shard_2:
    image: postgres:15
    container_name: pg_shard_2
    environment:
      POSTGRES_USER: ${PG_SHARD_USER}
      POSTGRES_PASSWORD: ${PG_SHARD_PASS}
      POSTGRES_DB: ${PG_SHARD_DB}
    ports:
      - "5435:5432"
    volumes:
      - pgdata2:/var/lib/postgresql/data
      - ./sql/001_schema.sql:/docker-entrypoint-initdb.d/001_schema.sql:ro
    networks:
      - social-network

  # Master database for shard metadata
  pg_master:
    image: postgres:15
    container_name: pg_master
    environment:
      POSTGRES_USER: ${PG_MASTER_USER}
      POSTGRES_PASSWORD: ${PG_MASTER_PASS}
      POSTGRES_DB: ${PG_MASTER_DB}
    ports:
      - "5440:5432"
    volumes:
      - pgdata_master:/var/lib/postgresql/data
      - ./sql/002_shard_metadata.sql:/docker-entrypoint-initdb.d/002_shard_metadata.sql:ro
    networks:
      - social-network

  # Database Admin UI
  adminer:
    image: adminer:4
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - pg_shard_0
      - pg_shard_1
      - pg_shard_2
      - pg_master
    networks:
      - social-network

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - social-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - social-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - social-network

  # Topic initializer - creates topics on startup
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
      echo 'Creating Kafka topics...'
      kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic posts
      kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic comments  
      kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic likes
      echo 'Topics created successfully!'
      "
    networks:
      - social-network

  # Ingestion Service
  ingestion-service:
    build:
      context: .
      dockerfile: Dockerfile.ingestion
    container_name: ingestion-service
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - APP_PORT=8081
    volumes:
      - ./.env:/root/.env:ro
    networks:
      - social-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Consumer Service
  consumer-service:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: consumer-service
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      pg_master:
        condition: service_started
      pg_shard_0:
        condition: service_started
      pg_shard_1:
        condition: service_started
      pg_shard_2:
        condition: service_started
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - CONSUMER_PORT=8082
      - PG_MASTER_HOST=pg_master
      - PG_MASTER_PORT=5432
      - PG_MASTER_USER=${PG_MASTER_USER}
      - PG_MASTER_PASS=${PG_MASTER_PASS}
      - PG_MASTER_DB=${PG_MASTER_DB}
    volumes:
      - ./.env:/root/.env:ro
    networks:
      - social-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Query Service
  query-service:
    build:
      context: .
      dockerfile: Dockerfile.query
    container_name: query-service
    depends_on:
      pg_master:
        condition: service_started
      pg_shard_0:
        condition: service_started
      pg_shard_1:
        condition: service_started
      pg_shard_2:
        condition: service_started
    ports:
      - "8083:8083"
    environment:
      - QUERY_PORT=8083
      - PG_MASTER_HOST=pg_master
      - PG_MASTER_PORT=5432
      - PG_MASTER_USER=${PG_MASTER_USER}
      - PG_MASTER_PASS=${PG_MASTER_PASS}
      - PG_MASTER_DB=${PG_MASTER_DB}
    volumes:
      - ./.env:/root/.env:ro
    networks:
      - social-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - social-network
    depends_on:
      - ingestion-service
      - consumer-service
      - query-service

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - social-network
    depends_on:
      - prometheus

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - social-network

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - social-network
    depends_on:
      - elasticsearch

  # Fluentd - Log Collection
  fluentd:
    build:
      context: ./monitoring/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - social-network
    depends_on:
      - elasticsearch

volumes:
  pgdata0:
  pgdata1:
  pgdata2:
  pgdata_master:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  social-network:
    driver: bridge